% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/trim.R
\name{trim}
\alias{trim}
\title{Trim a numeric vector}
\usage{
trim(x, lo, hi, type = c("smart", "value", "percentile"))
}
\arguments{
\item{x}{A numeric vector.}

\item{lo}{The lower value for trimming.}

\item{hi}{The upper value for trimming.}

\item{type}{A character string indicating the desired type of trimming with \code{"smart"}
being the default.  This must be (an abbreviation of) one of the strings \code{"smart"},
\code{"value"}, or \code{"percentile"}.  See Details for more information.}
}
\value{
The output of \code{trim} is a trimmed numeric vector with the same length as \code{x}.
}
\description{
\code{trim} returns a trimmed numeric vector.
}
\details{
\code{trim} returns a trimmed version of the numeric vector \code{x}.  \code{NA} values in
  \code{x} are ignored during the trimming process but preserved in the output.

\code{trim} is designed to be readable from the function call.  For example,
  \code{trim(x, lo=-1, hi=1)} can be read as "\strong{Trim} \strong{x} at \strong{-1}
  and \strong{1}".

The arguments \code{lo} and \code{hi} are used based on \code{type}.
  \code{trim} offers several different options for \code{type}:

\itemize{
  \item \strong{smart}: The default option that derives \code{type}
    based on the values of \code{x}, \code{lo}, and \code{hi}.  Currently, smart will
    use percentiles if \code{lo} and \code{hi} are between 0 and 1 and use values otherwise.
  \item \strong{value}: \code{lo} and \code{hi} are used as raw values
    (e.g. .05 is the value .05).
  \item \strong{percentile}: \code{lo} and \code{hi} are used as percentiles
    (e.g. .05 is 5th percentile).
}
}
\examples{
set.seed(1337)
x <- rnorm(1e4)
summary(x)

# Trim at -1 and 1
# Smart
x_val <- trim(x, lo=-1, hi=1)
summary(x_val)
# Explicit
x_val <- trim(x, lo=-1, hi=1, type='v')
summary(x_val)

# Trim at 5th and 95th percentiles
# Smart
x_per <- trim(x, lo=.05, hi=.95)
summary(x_per)
x_per <- trim(x, lo=.05, hi=.95, type='p')
summary(x_per)

# One-sided trims
# Trim lower at -1
x_lower_trim <- trim(x, lo=-1)
summary(x_lower_trim)
# Trim upper at 95th percentile
x_upper_trim <- trim(x, hi=.95)
summary(x_upper_trim)
}

